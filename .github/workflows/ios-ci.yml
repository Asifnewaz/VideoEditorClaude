name: iOS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  SCHEME: VEClaude
  CONFIGURATION: Release

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Cache Derived Data
      uses: actions/cache@v4
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-derived-data-${{ hashFiles('**/*.xcodeproj') }}
        restore-keys: |
          ${{ runner.os }}-derived-data-
          
    - name: Install Dependencies
      run: |
        # Install xcpretty for better test output formatting
        gem install xcpretty
        # Install bc for math calculations in coverage check
        brew install bc
        # Add any package manager dependencies here
        # pod install --repo-update (if using CocoaPods)
        # carthage update --platform iOS (if using Carthage)
        echo "Dependencies installed"
        
    - name: Find Available iOS Simulator
      id: simulator
      run: |
        echo "Available iOS Simulators:"
        xcrun simctl list devices available
        
        # Try common iPhone simulator names in order of preference
        for iPhone in "iPhone 15" "iPhone 14" "iPhone 13" "iPhone 12" "iPhone SE (3rd generation)" "iPhone 11"; do
          if xcrun simctl list devices | grep -q "$iPhone"; then
            echo "Found iPhone simulator: $iPhone"
            DESTINATION="platform=iOS Simulator,name=$iPhone"
            break
          fi
        done
        
        # If no specific iPhone found, use generic fallback
        if [ -z "$DESTINATION" ]; then
          echo "No common iPhone simulators found, using fallback"
          DESTINATION="platform=iOS Simulator,name=iPhone 14"
        fi
        
        echo "destination=$DESTINATION" >> $GITHUB_OUTPUT
        echo "Final destination: $DESTINATION"
        
    - name: Build Project
      run: |
        xcodebuild clean build \
          -project VEClaude.xcodeproj \
          -scheme $SCHEME \
          -configuration $CONFIGURATION \
          -destination "${{ steps.simulator.outputs.destination }}" \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          ONLY_ACTIVE_ARCH=NO
          
    - name: Run Unit Tests
      run: |
        set -o pipefail && xcodebuild test \
          -project VEClaude.xcodeproj \
          -scheme $SCHEME \
          -configuration Debug \
          -destination "${{ steps.simulator.outputs.destination }}" \
          -resultBundlePath TestResults \
          -enableCodeCoverage YES \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          ONLY_ACTIVE_ARCH=NO | tee xcodebuild.log | xcpretty -r junit -o test-results.xml
          
    - name: List Test Results Directory
      run: |
        echo "Current directory contents:"
        ls -la
        echo "Looking for test result files:"
        find . -name "*.xml" -o -name "*test*" -type f | head -10
        
    - name: Generate Test Report
      uses: dorny/test-reporter@v1
      if: (success() || failure()) && hashFiles('test-results.xml') != ''
      with:
        name: iOS Test Results
        path: test-results.xml
        reporter: java-junit
        
    - name: Generate Code Coverage Report
      run: |
        echo "Generating code coverage report..."
        # Find the coverage file
        COVERAGE_FILE=$(find TestResults -name "*.xccovreport" | head -1)
        if [ -n "$COVERAGE_FILE" ]; then
          echo "Found coverage report: $COVERAGE_FILE"
          
          # Generate coverage summary
          xcrun xccov view --report --only-targets "$COVERAGE_FILE" > coverage-summary.txt
          
          # Extract overall coverage percentage
          COVERAGE_PERCENT=$(xcrun xccov view --report --only-targets "$COVERAGE_FILE" | grep "VEClaude.app" | awk '{print $NF}' | sed 's/%//')
          echo "COVERAGE_PERCENT=$COVERAGE_PERCENT" >> $GITHUB_ENV
          
          echo "Overall code coverage: ${COVERAGE_PERCENT}%"
          echo "Coverage report generated successfully"
          
          # Display coverage summary
          cat coverage-summary.txt
        else
          echo "No coverage report found"
          echo "COVERAGE_PERCENT=0" >> $GITHUB_ENV
        fi
        
    - name: Check Code Coverage Threshold
      run: |
        MINIMUM_COVERAGE=70
        CURRENT_COVERAGE=${COVERAGE_PERCENT:-0}
        
        echo "Current coverage: ${CURRENT_COVERAGE}%"
        echo "Minimum required: ${MINIMUM_COVERAGE}%"
        
        # Save coverage info for PR comment
        echo "CURRENT_COVERAGE=$CURRENT_COVERAGE" >> $GITHUB_ENV
        echo "MINIMUM_COVERAGE=$MINIMUM_COVERAGE" >> $GITHUB_ENV
        
        if (( $(echo "$CURRENT_COVERAGE < $MINIMUM_COVERAGE" | bc -l) )); then
          echo "❌ Code coverage ($CURRENT_COVERAGE%) is below minimum threshold ($MINIMUM_COVERAGE%)"
          echo "Please add tests to improve coverage before merging."
          echo "COVERAGE_FAILED=true" >> $GITHUB_ENV
          exit 1
        else
          echo "✅ Code coverage ($CURRENT_COVERAGE%) meets minimum threshold ($MINIMUM_COVERAGE%)"
          echo "COVERAGE_FAILED=false" >> $GITHUB_ENV
        fi
        
    - name: Comment Coverage Result on PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && always()
      with:
        script: |
          const coverage = process.env.CURRENT_COVERAGE || '0';
          const minimum = process.env.MINIMUM_COVERAGE || '70';
          const failed = process.env.COVERAGE_FAILED === 'true';
          
          const emoji = failed ? '❌' : '✅';
          const status = failed ? 'Below Threshold' : 'Meets Threshold';
          
          const body = `## ${emoji} Code Coverage Report
          
          **Current Coverage:** ${coverage}%
          **Minimum Required:** ${minimum}%
          **Status:** ${status}
          
          ${failed ? 
            '⚠️ **Action Required:** Please add tests to improve code coverage before merging.' : 
            '🎉 Great job! Your code coverage meets the minimum threshold.'
          }
          
          📊 [View detailed coverage report in build artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
        
    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-${{ github.sha }}
        path: |
          coverage-summary.txt
          TestResults/
        retention-days: 30
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: ios-build-${{ github.sha }}
        path: |
          build/Build/Products/Release-iphonesimulator/
        retention-days: 7

  code-quality:
    name: Code Quality Analysis
    runs-on: macos-latest
    needs: build-and-test
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Run SwiftLint
      uses: norio-nomura/action-swiftlint@3.2.1
      with:
        args: --reporter github-actions-logging
        
    - name: Static Analysis
      run: |
        xcodebuild analyze \
          -project VEClaude.xcodeproj \
          -scheme $SCHEME \
          -configuration $CONFIGURATION \
          -destination "$DESTINATION" \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO

  security-scan:
    name: Security Scan
    runs-on: macos-latest
    needs: build-and-test
    if: false # Temporarily disabled - dependency check may require additional setup
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Run Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'VideoEditorClaude'
        path: '.'
        format: 'JSON'
        
    - name: Upload Dependency Check Results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: reports/

  performance-test:
    name: Performance Testing
    runs-on: macos-latest
    needs: build-and-test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Install xcpretty
      run: gem install xcpretty
      
    - name: Find Available iOS Simulator
      id: perf-simulator
      run: |
        # Try common iPhone simulator names in order of preference
        for iPhone in "iPhone 15" "iPhone 14" "iPhone 13" "iPhone 12" "iPhone SE (3rd generation)" "iPhone 11"; do
          if xcrun simctl list devices | grep -q "$iPhone"; then
            echo "Found iPhone simulator: $iPhone"
            DESTINATION="platform=iOS Simulator,name=$iPhone"
            break
          fi
        done
        
        # If no specific iPhone found, use generic fallback
        if [ -z "$DESTINATION" ]; then
          echo "No common iPhone simulators found, using fallback"
          DESTINATION="platform=iOS Simulator,name=iPhone 14"
        fi
        
        echo "destination=$DESTINATION" >> $GITHUB_OUTPUT
        echo "Performance test destination: $DESTINATION"
        
    - name: Run Performance Tests
      run: |
        set -o pipefail && xcodebuild test \
          -project VEClaude.xcodeproj \
          -scheme $SCHEME \
          -configuration Release \
          -destination "${{ steps.perf-simulator.outputs.destination }}" \
          -only-testing:VEClaudeTests \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO | xcpretty

  build-for-distribution:
    name: Build for Distribution
    runs-on: macos-latest
    needs: [build-and-test, code-quality, security-scan]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Import Code Signing Certificate
      uses: apple-actions/import-codesign-certs@v5
      with:
        p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
        p12-password: ${{ secrets.CERTIFICATES_PASSWORD }}
        
    - name: Install Provisioning Profile
      uses: apple-actions/download-provisioning-profiles@v1
      with:
        bundle-id: 'com.asifnewaz.veclaude'
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
        
    - name: Build Archive
      run: |
        xcodebuild archive \
          -project VEClaude.xcodeproj \
          -scheme $SCHEME \
          -configuration $CONFIGURATION \
          -destination 'generic/platform=iOS' \
          -archivePath build/VEClaude.xcarchive \
          CODE_SIGN_STYLE=Manual \
          PROVISIONING_PROFILE_SPECIFIER="${{ secrets.PROVISIONING_PROFILE_NAME }}" \
          CODE_SIGN_IDENTITY="iPhone Distribution"
          
    - name: Export IPA
      run: |
        xcodebuild -exportArchive \
          -archivePath build/VEClaude.xcarchive \
          -exportPath build \
          -exportOptionsPlist ExportOptions.plist
          
    - name: Upload to App Store Connect
      uses: apple-actions/upload-testflight-build@v1
      with:
        app-path: build/VEClaude.ipa
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
        
    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-build-${{ github.event.release.tag_name }}
        path: |
          build/VEClaude.ipa
          build/VEClaude.xcarchive
        retention-days: 30

  deploy-documentation:
    name: Deploy Documentation
    runs-on: macos-latest
    needs: build-and-test
    if: false # Temporarily disabled - may need additional setup for documentation generation
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Generate Documentation
      run: |
        xcodebuild docbuild \
          -project VEClaude.xcodeproj \
          -scheme $SCHEME \
          -destination "$DESTINATION"
          
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build/Documentation
        
  notify-slack:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: false # Disabled - SLACK_WEBHOOK secret not configured
    
    steps:
    - name: Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#ios-builds'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow